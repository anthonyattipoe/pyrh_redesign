name: build

on:
  pull_request:
  push:
    branches: [ master ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: set PY
        run: echo "::set-env name=PY::$(python -c 'import hashlib, sys;print(hashlib.sha256(sys.version.encode()+sys.executable.encode()).hexdigest())')"
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
      - name: Add Poetry to Path Unix
        run: echo "::add-path::$HOME/.poetry/bin"
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache-poetry
        with:
          path: ~/.virtualenvs
          key: poetry|pre-commit|v3|${{ matrix.os }}|${{ env.PY }}|${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry|pre-commit|v3|${{ matrix.os }}|${{ env.PY }}|
      - name: Install Project Dependencies (Poetry)
        run: |
          poetry install -vvv
        if: steps.cache-poetry.outputs.cache-hit != 'true'
      - name: Add poetry env to PATH
        run: |
          echo "::add-path::$( poetry env info --path )/bin"
      - uses: actions/cache@v1
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|v2|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - uses: pre-commit/action@v1.0.1
  test:
    needs: lint
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        python-version: [ 3.6, 3.7, 3.8]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: set PY
        run: echo "::set-env name=PY::$(python -c 'import hashlib, sys;print(hashlib.sha256(sys.version.encode()+sys.executable.encode()).hexdigest())')"
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
      - name: Set Poetry to Path Windows
        run: echo "::add-path::%USERPROFILE%\.poetry\bin"
        if: ${{ runner.os }} == "Windows"
      - name: Add Poetry to Path Unix
        run: echo "::add-path::$HOME/.poetry/bin"
        if: (${{ runner.os }} == "Linux") || (${{ runner.os }} == "macOS")
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache-poetry
        with:
          path: ~/.virtualenvs
          key: poetry|v3|${{ matrix.os }}|${{ env.PY }}|${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry|v3|${{ matrix.os }}|${{ env.PY }}|
      - name: Install Project Dependencies (Poetry)
        run: |
          poetry install -vvv
        if: steps.cache-poetry.outputs.cache-hit != 'true'
      - name: Run pytest
        run : poetry run pytest
